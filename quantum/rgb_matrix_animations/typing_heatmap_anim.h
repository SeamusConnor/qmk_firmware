#if defined(RGB_MATRIX_FRAMEBUFFER_EFFECTS) && !defined(DISABLE_RGB_MATRIX_TYPING_HEATMAP)
RGB_MATRIX_EFFECT(TYPING_HEATMAP)
#    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
/* #include <print.h> */


void matrix_rc_to_real_rc(uint8_t *row, uint8_t *col) {
    static uint8_t map[] = {
        0x00,0x01,0x02,0x03,0x04,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x10,0x11,0x12,0x13,0x14,0x15,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x20,0x21,0x22,0x23,0x24,0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x30,0x31,0x32,0x3a,0x3b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x06,0x07,0x08,0x09,0x0a,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x16,0x17,0x18,0x19,0x1a,0x1b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x26,0x27,0x28,0x29,0x2a,0x2b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x37,0x38,0x39,0x33,0x34,0x35,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    uint8_t val = map[((*row) << 4) | *col];
    *row = (val >> 4) & 0xf;
    *col = val & 0xf;
}

void real_rc_to_matrix_rc(uint8_t *row, uint8_t *col) {
    static uint8_t map[] = {
        0x00,0x01,0x02,0x03,0x04,0x05,0x40,0x41,0x42,0x43,0x44,0x45,0x00,0x00,0x00,0x00,
        0x10,0x11,0x12,0x13,0x14,0x15,0x50,0x51,0x52,0x53,0x54,0x55,0x00,0x00,0x00,0x00,
        0x20,0x21,0x22,0x23,0x24,0x25,0x60,0x61,0x62,0x63,0x64,0x65,0x00,0x00,0x00,0x00,
        0x30,0x31,0x32,0x73,0x74,0x75,0x00,0x70,0x71,0x72,0x33,0x34,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    uint8_t val = map[((*row) << 4) | *col];
    *row = (val >> 4) & 0xf;
    *col = val & 0xf;
}

static uint8_t rgb_frame_buffer2[4][12] = {{0}};


void process_rgb_matrix_typing_heatmap(keyrecord_t* record) {
    uint8_t row   = record->event.key.row;
    uint8_t col   = record->event.key.col;
    matrix_rc_to_real_rc(&row, &col);

    if (row == 3 && col == 5) {
        uint8_t rm1 = row - 1;
        uint8_t cp1 = col + 1;
        uint8_t cp2 = col + 2;
        rgb_frame_buffer2[rm1][cp1] = qadd8(rgb_frame_buffer2[rm1][cp1], 3);
        rgb_frame_buffer2[rm1][cp2] = qadd8(rgb_frame_buffer2[rm1][cp2], 13);
        rgb_frame_buffer2[row][cp2] = qadd8(rgb_frame_buffer2[row][cp2], 16);
    }

    uint8_t m_row = row - 1;
    uint8_t p_row = row + 1;
    uint8_t m_col = col - 1;
    uint8_t p_col = col + 1;

    if (col) rgb_frame_buffer2[row][m_col] = qadd8(rgb_frame_buffer2[row][m_col], 16);
    rgb_frame_buffer2[row][col] = qadd8(rgb_frame_buffer2[row][col], 32);
    if (p_col < 12) rgb_frame_buffer2[row][p_col] = qadd8(rgb_frame_buffer2[row][p_col], 16);

    if (p_row < 4) {
        if (col) rgb_frame_buffer2[p_row][m_col] = qadd8(rgb_frame_buffer2[p_row][m_col], 13);
        rgb_frame_buffer2[p_row][col] = qadd8(rgb_frame_buffer2[p_row][col], 16);
        if (p_col < 12) rgb_frame_buffer2[p_row][p_col] = qadd8(rgb_frame_buffer2[p_row][p_col], 13);
    }

    if (row) {
        if (col) rgb_frame_buffer2[m_row][m_col] = qadd8(rgb_frame_buffer2[m_row][m_col], 13);
        rgb_frame_buffer2[m_row][col] = qadd8(rgb_frame_buffer2[m_row][col], 16);
        if (p_col < 12) rgb_frame_buffer2[m_row][p_col] = qadd8(rgb_frame_buffer2[m_row][p_col], 13);
    }

    uint8_t spc1 = rgb_frame_buffer2[3][5];
    uint8_t spc2 = rgb_frame_buffer2[3][6];
    rgb_frame_buffer2[3][5] = spc1 > spc2 ? spc1 : spc2;

    /* for (uint8_t r = 0; r < 4; r++) { */
    /*     for (uint8_t c = 0; c < 12; c++) { */
    /*         uprintf("%03d ", rgb_frame_buffer2[r][c]); */
    /*     } */
    /*     print("\n"); */
    /* } */
    /* print("\n"); */
}

bool TYPING_HEATMAP(effect_params_t* params) {
    // Modified version of RGB_MATRIX_USE_LIMITS to work off of matrix row / col size
    uint8_t led_min = RGB_MATRIX_LED_PROCESS_LIMIT * params->iter;
    uint8_t led_max = led_min + RGB_MATRIX_LED_PROCESS_LIMIT;
    if (led_max > sizeof(rgb_frame_buffer2)) led_max = sizeof(rgb_frame_buffer2);

    if (params->init) {
        rgb_matrix_set_color_all(0, 0, 0);
        memset(rgb_frame_buffer2, 0, sizeof rgb_frame_buffer2);
    }

    // Render heatmap & decrease
    for (int i = led_min; i < led_max; i++) {
        uint8_t row = i % 4;
        uint8_t col = i / 4;
        uint8_t val = rgb_frame_buffer2[row][col];
        rgb_frame_buffer2[row][col] = qsub8(val, 1);

        if (row == 3 && col == 6) {
            continue;
        }
        real_rc_to_matrix_rc(&row, &col);

        // set the pixel colour
        uint8_t led[LED_HITS_TO_REMEMBER];
        uint8_t led_count = rgb_matrix_map_row_column_to_led(row, col, led);
        for (uint8_t j = 0; j < led_count; ++j) {
            if (!HAS_ANY_FLAGS(g_led_config.flags[led[j]], params->flags)) continue;

            HSV hsv = {170 - qsub8(val, 85), rgb_matrix_config.hsv.s, scale8((qadd8(170, val) - 170) * 3, rgb_matrix_config.hsv.v)};
            RGB rgb = hsv_to_rgb(hsv);
            rgb_matrix_set_color(led[j], rgb.r, rgb.g, rgb.b);
        }

    }

    return led_max < sizeof(rgb_frame_buffer2);
}

#    endif  // RGB_MATRIX_CUSTOM_EFFECT_IMPLS
#endif      // defined(RGB_MATRIX_FRAMEBUFFER_EFFECTS) && !defined(DISABLE_RGB_MATRIX_TYPING_HEATMAP)
